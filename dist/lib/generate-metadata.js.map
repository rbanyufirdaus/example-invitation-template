{"version":3,"file":"generate-metadata.js","sources":["../../src/lib/generate-metadata.ts"],"sourcesContent":["// import * as fs from 'fs';\n// import * as path from 'path';\n// import { parse, ComponentDoc } from 'react-docgen-typescript';\n\n// /**\n//  * Generates metadata for React components and attaches it as a static property.\n//  * \n//  * @param componentsDir - The directory containing React components.\n//  * @param outputDir - The directory to save the processed components with metadata.\n//  */\n// export function generateMetadata(componentsDir: string, outputDir: string): void {\nexport function generateMetadata(): void {\n//   // Ensure the output directory exists\n//   if (!fs.existsSync(outputDir)) {\n//     fs.mkdirSync(outputDir, { recursive: true });\n//   }\n\n//   // Get all .tsx files from the components directory\n//   const files = fs.readdirSync(componentsDir).filter((file) => file.endsWith('.tsx'));\n\n//   files.forEach((file) => {\n//     const filePath = path.join(componentsDir, file);\n//     const source = fs.readFileSync(filePath, 'utf8');\n\n//     try {\n//       // Parse metadata using react-docgen-typescript\n//       const [doc]: ComponentDoc[] = parse(filePath, { savePropValueAsString: true });\n\n//       // Generate the new component file with metadata attached\n//       const componentWithMetadata = `\n//         import Component from '${path.relative(outputDir, filePath).replace(/\\\\/g, '/')}';\n\n//         Component.metadata = ${JSON.stringify(doc, null, 2)};\n\n//         export default Component;\n//       `;\n\n//       const outputFilePath = path.join(outputDir, file);\n//       fs.writeFileSync(outputFilePath, componentWithMetadata);\n//       console.log(`Processed: ${file}`);\n//     } catch (error) {\n//       console.error(`Error processing ${file}:`, (error as Error).message);\n//     }\n//   });\n\n//   console.log('Metadata generation completed.');\n}\n"],"names":["generateMetadata"],"mappings":"AAWO,SAASA,IAAyB;AAmCzC;"}